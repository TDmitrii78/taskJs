"use strict";

// Давайте произведём 5 операций с массивом.

//     Создайте массив styles с элементами «Джаз» и «Блюз».
//     Добавьте «Рок-н-ролл» в конец.
//     Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
//     Удалите первый элемент массива и покажите его.
//     Вставьте Рэп и Регги в начало массива.

// let styles =["Джаз", "Блюз"];
// styles.push("Рок-н-ролл");
// styles[Math.floor(styles.length/2)] = "Классика";
// console.log(styles.shift());
// styles.unshift("Рэп", "Регги");


// console.log(styles);

// --------------------------------------------------------

/*
let arr = ["a", "b"];

arr.push(function() {
  alert( this );
})

arr[2](); 
*/

// ------------------------------------------------------------

// Сумма введённых чисел
// важность: 4

// Напишите функцию sumInput(), которая:

//     Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
//     Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
//     Подсчитывает и возвращает сумму элементов массива.

// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».

// function sumInput() {

//     let sum = 0;
//     let arr = [];
//     while (true) {
//         let a = prompt("Введите число:");
//         if ((a === null) || (a === "") || (!isFinite(a))) {
//             break;
//         }
//         arr.push(+a);
//     }
//     console.log(arr);
//     for (let item of arr) {
//         sum += item;
//     }
//     return sum;
// }

// console.log(sumInput());

// --------------------------------------------------------

// Переведите текст вида border-left-width в borderLeftWidth
// важность: 5

// Напишите функцию camelize(str), которая преобразует строки 

// вида «my-short-string» в «myShortString».

// То есть дефисы удаляются, а все слова после них получают заглавную букву.

// function camelize(str) {
//     let arr = [];
//     let newArr = [];
//     arr = str.split("-");
//     newArr = arr.map((el, index) => (index === 0) ? el : el = el[0].toUpperCase() + el.slice(1));
//     return str = newArr.join("");
// }

// console.log(camelize("my-short-string"));

// -------------------------------------------------------------

// Фильтрация по диапазону
// важность: 4

// Напишите функцию filterRange(arr, a, b), которая принимает массив arr, ищет элементы со 
// значениями больше или равными a и меньше или равными b и возвращает результат в виде массива.

// Функция должна возвращать новый массив и не изменять исходный.

// let arr = [5, 3, 8, 1];


// function filterRange(arr, a, b) {
//   return arr.filter(el => ((el >= a) && (el <= b)));

// }

// let filtered = filterRange(arr, 1, 4);

// alert( filtered ); // 3,1 (совпадающие значения)

// alert( arr ); // 5,3,8,1 (без изменений)

// -----------------------------------------------------


// Фильтрация по диапазону "на месте"
// важность: 4

// Напишите функцию filterRangeInPlace(arr, a, b), которая принимает массив arr и удаляет 

// из него все значения кроме тех, которые находятся между a и b. То есть, проверка имеет

// вид a ≤ arr[i] ≤ b.

// Функция должна изменять принимаемый массив и ничего не возвращать.

// let arr = [1, 2, 8, 5, 12, 2, 4];

// function filterRangeInPlace(arr, a, b) {
//   arr.forEach((element, index )=> {
//      if (!((element >= a) && (element <= b))) {f
//        arr.splice(index, 1)
//      }
//   });
// }

// function filterRangeInPlace(arr, a, b) {
//   for (let index in arr) {
//     if ((arr[index] < a) || (arr[index] > b)) {
//       arr.splice(index, 1);
//     }
//   }
// }

// filterRangeInPlace(arr, 2, 5)
// console.log(arr);

// --------------------------------------------------------------

// // Сортировать в порядке по убыванию
// // важность: 4

// let arr = [5, 2, 1, -10, 8];

// arr.sort((a, b) => b - a);



// alert( arr ); // 8, 5, 2, 1, -10

// -------------------------------------

// Скопировать и отсортировать массив
// важность: 5

// У нас есть массив строк arr. Нужно получить отсортированную копию, 

// но оставить arr неизменённым.

// Создайте функцию copySorted(arr), которая будет возвращать такую копию.

function copySorted(arr) {
  return arr.slice().sort();
}

let arr = ["HTML", "JavaScript", "CSS"];

let sorted = copySorted(arr);

alert( sorted ); // CSS, HTML, JavaScript
alert( arr ); // HTML, JavaScript, CSS (без изменений)